#!/usr/bin/env ruby

require 'yaml'
require 'optparse'
require 'csv'
require 'front_matter_parser'
require 'erb'
require 'ostruct'
require 'benchmark'
require_relative '../lib/netsmtp'

interval = 0
dry_run = false

opt = OptionParser.new
opt.on('-c', '--config=CONFIG_FILE') {|v| CONFIG_FILE = v }
opt.on('-s', '--source=SOURCE_FILE') {|v| SOURCE_FILE = v }
opt.on('-t', '--template=TEMPLATE_FILE') {|v| TEMPLATE_FILE = v }
opt.on('-i', '--interval=INTERVAL(sec)') {|v| interval = v.to_f }
opt.on('--dry-run') {|v| dry_run = v }
opt.parse!(ARGV)

exit 1 unless defined? CONFIG_FILE and defined? SOURCE_FILE and defined? TEMPLATE_FILE

config = YAML.load_file(CONFIG_FILE).map{|k,v| [k.to_sym, v] }.to_h
mail = SMTPMail.new config

source = CSV.read SOURCE_FILE,
  col_sep: "\t",
  headers: :first_row,
  header_converters: :symbol,
  skip_blanks: true

parsed = FrontMatterParser.parse_file(TEMPLATE_FILE)
mail.from = parsed.front_matter['from']
mail.subject = parsed.front_matter['subject']
template = ERB.new parsed.content

total = source.length
current = 0

times = []

source.each do |row|
  begin
    sleep interval
    times << Benchmark.realtime do
      mail.to = row[:email]
      params = OpenStruct.new(row.to_h).instance_eval {binding}
      mail.body = template.result(params)
      mail.send unless dry_run
    end
    current += 1
    printf "%.5f (%d/%d) %s", times.last, current, total, row
  rescue => e
    puts "[ERROR] #{e}"
  end
end

puts "Average Time: #{times.inject(:+) / times.length}"
